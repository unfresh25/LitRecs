---
title: "Guide"
description: "In this guide, we will demonstrate how to extract book data, store it in a database, and retrieve it during book searches."
toc: false
---

# OpenLibrary API

To acquire data for books not already registered in our database, we use the freely available `OpenLibrary API`. The following function fetches books based on user requests:

``` {python}
def search_book_by_title(title):
    url = f"https://openlibrary.org/search.json"
    params = {
        'title': title,
        'limit': 5
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        return data['docs']
    else:
        print("Error al conectar con OpenLibrary API")
        return []
```

For books already registered, we retrieve them from a PostgreSQL database hosted on [Neon](https://neon.tech/). This approach ensures that books not stored in the database are fetched using the OpenLibrary API, processed, and uploaded to the database for future searches.

## Required libraries

To proceed, we need the following libraries:

1. psycopg2
2. pandas
3. python-dotenv
4. requests
5. os

Let's load these libraries:

``` {python}
import psycopg2 as psy
from psycopg2 import Error

import pandas as pd
from dotenv import load_dotenv
import os
import requests

load_dotenv()

DATABASE_URL = os.getenv('DATABASE_URL')
```

## Fetching book information

Let's see how to fetch information about a book using the `OpenLibrary API`. For instance, we will search for _Animal Farm_ by _George Orwell_:

``` {python}
title = "Animal Farm"
books = search_book_by_title(title)
```

This code calls our search function and retrieves books related to the requested title. The response data is extensive, so let's extract some key information:

``` {python}
books_df = []

for book in books:
    title = book.get('title')

    author_list = book.get('author_name', ['Author not available'])
    author = author_list[0] if author_list else 'Author not available'

    year = book.get('first_publish_year', 'Year not available')

    isbn_list = book.get('isbn', ['ISBN not available'])
    isbn = isbn_list[0] if isbn_list else 'ISBN not available'

    books_df.append([title, author, year, isbn])

books_df = pd.DataFrame(books_df, columns=['Title', 'Author', 'Year', 'ISBN'])
books_df
```

<br>

This code compiles important information such as the book's title, author, publication year, and ISBN. The OpenLibrary API also provides additional data about the book cover, language, editions, number of pages, publisher, genres, and more, which we will explore further in subsequent sections.